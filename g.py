import numpy as np
import datetime
a = datetime.datetime.now()
# ...wait a while...

trainFeaturesArray = [[4.07322962e+02, 8.66683290e-01, 1.76446580e-04, 1.82157475e-01],
 [1.71112046e+02, 9.32020007e-01, 3.98442505e-04, 2.64235503e-01],
 [6.20499619e+01, 9.81776961e-01, 1.23903365e-03, 3.41201375e-01],
 [8.93885156e+01, 9.28906845e-01, 5.65142183e-04, 2.65269130e-01],
 [8.70775919e+02, 8.54245862e-01, 6.87666494e-05, 1.46003078e-01],
 [4.32286588e+02, 8.85354142e-01, 1.50046813e-04, 1.93292978e-01],
 [2.58199798e+02, 9.28207765e-01, 2.17403752e-04, 2.33752453e-01],
 [8.28882349e+02, 8.34541131e-01, 9.39473567e-05, 1.62131909e-01],
 [8.99474023e+02, 8.47669240e-01, 7.22194038e-05, 1.48747096e-01],
 [3.45323304e+01, 9.91007001e-01, 9.45786726e-04, 4.37845686e-01],
 [2.41309159e+02, 9.02032420e-01, 2.69861103e-04, 2.10627965e-01],
 [7.30241016e+01, 9.75592503e-01, 1.09108814e-03, 3.36903415e-01],
 [7.43496778e+02, 8.74782288e-01, 8.83200841e-05, 1.68824633e-01],
 [5.60267916e+02, 8.72446403e-01, 9.85934755e-05, 1.63155413e-01],
 [3.04130889e+02, 9.05323362e-01, 2.16812058e-04, 2.22146306e-01],
 [4.93663097e+02, 8.51646983e-01, 1.65533807e-04, 1.90170438e-01],
 [5.13359826e+02, 9.20378335e-01, 6.44759723e-04, 2.69878260e-01],
 [6.42561275e+02, 8.78680084e-01, 1.01348144e-04, 1.69814769e-01],
 [5.07194293e+01, 9.75744994e-01, 4.20895349e-04, 2.94390685e-01],
 [2.72434907e+02, 8.86069431e-01, 2.49068651e-04, 2.07879277e-01],
 [1.48807594e+02, 9.44890970e-01, 3.49946138e-04, 2.47586081e-01],
 [3.04367816e+01, 9.95140237e-01, 5.14781395e-04, 3.93767106e-01],
 [1.90690323e+02, 9.44828962e-01, 2.69507887e-04, 2.57491968e-01],
 [2.26334138e+02, 9.70321654e-01, 2.30074837e-04, 2.60848367e-01],
 [2.27967290e+02, 9.44132328e-01, 1.62495587e-04, 2.19712246e-01],
 [7.79199751e+02, 8.82990710e-01, 1.15565276e-04, 1.74695672e-01],
 [1.55903572e+02, 9.38916150e-01, 2.64610693e-04, 2.31341774e-01],
 [1.26938055e+02, 9.35319420e-01, 3.79707521e-04, 2.38907273e-01],
 [4.64699510e+02, 8.60537110e-01, 1.58404732e-04, 1.74414569e-01],
 [7.01049121e+02, 8.65629150e-01, 1.01855213e-04, 1.73905384e-01],
 [5.38521897e+02, 9.07793775e-01, 9.06264052e-05, 1.61954175e-01],
 [4.78848975e+02, 8.71921510e-01, 1.41355833e-04, 1.89415819e-01],
 [1.97621829e+02, 9.27865514e-01, 2.81504743e-04, 2.57830425e-01],
 [4.25607906e+02, 8.67835175e-01, 1.66768039e-04, 1.91681493e-01],
 [5.07912557e+01, 9.84493499e-01, 3.52340640e-04, 3.15979665e-01],
 [5.68169144e+02, 8.94071200e-01, 8.70821052e-05, 1.59883260e-01],
 [3.86142671e+02, 8.63748706e-01, 2.06889030e-04, 1.90107611e-01],
 [1.00019438e+03, 8.81878339e-01, 7.84139040e-05, 1.56282717e-01],
 [5.14286928e+01, 9.77080233e-01, 4.64613650e-04, 3.11614223e-01],
 [4.34067422e+02, 8.56089241e-01, 1.48268168e-04, 1.67182591e-01],
 [2.37739715e+02, 9.48541102e-01, 1.96646597e-04, 2.14566553e-01],
 [2.76326614e+02, 8.94111410e-01, 2.27093695e-04, 1.97467965e-01],
 [2.96565824e+02, 9.22085931e-01, 2.38098248e-04, 2.34127448e-01],
 [2.63900429e+02, 9.34372194e-01, 1.92853235e-04, 2.29571221e-01],
 [3.82451064e+02, 8.56513026e-01, 1.99684195e-04, 1.87029234e-01],
 [5.50441339e+02, 8.55050901e-01, 1.36667224e-04, 1.73927459e-01],
 [8.00129449e+01, 9.88064279e-01, 4.88209800e-04, 3.56546416e-01],
 [3.45781917e+01, 9.07178305e-01, 1.92208290e-03, 3.46927490e-01],
 [1.54369612e+02, 9.00859047e-01, 3.99789460e-04, 2.30617038e-01],
 [5.63387251e+02, 8.81458926e-01, 1.00039250e-04, 1.69651447e-01],
 [3.72961250e+02, 8.99897716e-01, 1.50941768e-04, 1.88408096e-01],
 [3.07041082e+01, 9.67314429e-01, 9.68133714e-04, 3.30328294e-01],
 [3.13140248e+02, 9.33359517e-01, 1.32108001e-04, 1.86431068e-01],
 [4.01923640e+02, 8.97176080e-01, 1.73249349e-04, 2.15688340e-01],
 [4.53545368e+02, 8.77892513e-01, 1.49882465e-04, 1.79062043e-01],
 [4.12473609e+02, 8.23789399e-01, 1.70142520e-04, 1.61540331e-01],
 [5.26788190e+02, 8.84383459e-01, 1.07493797e-04, 1.67231224e-01],
 [5.27918455e+01, 9.71906126e-01, 5.58067432e-04, 2.93284079e-01],
 [3.71320036e+01, 9.88747698e-01, 2.04091239e-03, 3.75955224e-01],
 [6.75564748e+02, 8.19713697e-01, 1.13227506e-04, 1.59751686e-01],
 [2.19725982e+02, 9.72260516e-01, 2.17648784e-04, 2.53691237e-01],
 [7.73142253e+02, 8.73401307e-01, 7.71548605e-05, 1.57206341e-01],
 [1.04192166e+03, 8.43323368e-01, 6.47800716e-05, 1.45597853e-01],
 [1.05433150e+02, 9.48340567e-01, 3.94345521e-04, 2.51830877e-01],
 [3.64419493e+02, 8.72876324e-01, 2.00134295e-04, 2.05085166e-01],
 [1.55579728e+02, 9.66602791e-01, 3.76079542e-04, 3.32162411e-01],
 [1.17018327e+02, 9.35346245e-01, 5.33228725e-04, 2.62591275e-01],
 [5.94052768e+02, 8.71645819e-01, 9.53789978e-05, 1.61976338e-01],
 [3.54238862e+02, 9.08861826e-01, 1.52580235e-04, 1.87053358e-01],
 [7.00518582e+02, 8.40443865e-01, 1.06855483e-04, 1.64285258e-01],
 [9.55922107e+02, 8.52293410e-01, 6.99643436e-05, 1.52117406e-01],
 [1.91261967e+02, 9.11718235e-01, 3.84560030e-04, 2.38101635e-01],
 [3.42514869e+02, 8.98430571e-01, 1.78040224e-04, 1.95246962e-01],
 [1.36595205e+02, 9.64099963e-01, 2.71944502e-04, 2.64069921e-01],
 [4.28725881e+02, 8.25931241e-01, 2.14835223e-04, 1.76333867e-01]]
trainFeaturesArray = np.array(trainFeaturesArray, dtype = np.float64)



testFeaturesArray = [[3.21061321e+02, 8.96041364e-01, 2.04813023e-04, 0.00000000e+00],
 [3.62183390e+02, 8.37951381e-01, 2.25757036e-04, 0.00000000e+00],
 [3.02827137e+02, 8.25157130e-01, 2.16338249e-04, 0.00000000e+00],
 [3.60799896e+02, 8.46396879e-01, 2.24661890e-04, 0.00000000e+00],
 [3.49846245e+02, 8.77234505e-01, 1.95919575e-04, 0.00000000e+00],
 [4.16227863e+02, 8.71521509e-01, 1.56121076e-04, 0.00000000e+00],
 [7.20581296e+02, 8.79994009e-01, 9.06504525e-05, 0.00000000e+00],
 [7.44259177e+02, 8.59221444e-01, 9.11265394e-05, 0.00000000e+00],
 [4.51621260e+02, 9.05219217e-01, 1.46404260e-04, 0.00000000e+00],
 [1.74966206e+01, 9.86554858e-01, 1.39328191e-03, 0.00000000e+00],
 [6.11330494e+02, 8.77499490e-01, 8.82456419e-05, 0.00000000e+00],
 [1.26734927e+02, 9.47642908e-01, 4.53258012e-04, 0.00000000e+00],
 [8.94787799e+02, 8.54939953e-01, 7.27331721e-05, 0.00000000e+00],
 [3.78262783e+02, 8.42960770e-01, 2.19972943e-04, 0.00000000e+00],
 [3.36717697e+02, 9.13325707e-01, 1.86444155e-04, 0.00000000e+00],
 [1.99491933e+02, 9.68215416e-01, 5.32714535e-04, 0.00000000e+00],
 [4.71168044e+02, 9.09235762e-01, 1.30278985e-04, 0.00000000e+00],
 [1.14916413e+02, 9.83894075e-01, 9.14413490e-04, 0.00000000e+00],
 [3.29329901e+02, 8.30044976e-01, 2.87833994e-04, 0.00000000e+00],
 [4.78052051e+02, 9.10664562e-01, 9.52100474e-05, 0.00000000e+00],
 [2.97393090e+02, 8.60876192e-01, 2.56618900e-04, 0.00000000e+00],
 [6.11954135e+01, 9.82961876e-01, 4.34318687e-04, 0.00000000e+00],
 [5.51487296e+02, 8.81492208e-01, 1.32802335e-04, 0.00000000e+00],
 [3.90057689e+02, 8.26849732e-01, 2.27088555e-04, 0.00000000e+00],
 [1.71081231e+02, 8.87737546e-01, 3.93826459e-04, 0.00000000e+00],
 [1.70006995e+02, 8.74973219e-01, 3.58976055e-04, 0.00000000e+00],
 [1.42150062e+02, 9.08705883e-01, 3.96652763e-04, 0.00000000e+00],
 [3.56732161e+02, 8.74838289e-01, 1.76437948e-04, 0.00000000e+00],
 [1.88821114e+02, 9.37889673e-01, 2.31462528e-04, 0.00000000e+00],
 [1.73602139e+02, 9.76731690e-01, 7.78110894e-04, 0.00000000e+00],
 [1.43150356e+02, 8.97777127e-01, 4.32572039e-04, 0.00000000e+00],
 [1.48998984e+02, 9.73392877e-01, 2.81679926e-04, 0.00000000e+00],
 [1.69075247e+02, 9.43105866e-01, 2.13485582e-04, 0.00000000e+00],
 [5.54668873e+02, 8.88851945e-01, 1.38693758e-04, 0.00000000e+00],
 [4.12341901e+02, 8.04475125e-01, 2.37300281e-04, 0.00000000e+00],
 [3.21684264e+02, 9.20356224e-01, 1.77724817e-04, 0.00000000e+00],
 [7.61412656e+02, 8.69128697e-01, 8.53148434e-05, 0.00000000e+00],
 [1.03181060e+02, 9.78016595e-01, 6.03625169e-04, 0.00000000e+00],
 [3.63039128e+02, 8.25547774e-01, 2.40597153e-04, 0.00000000e+00],
 [4.16309941e+02, 9.01296594e-01, 1.69127510e-04, 0.00000000e+00],
 [3.46102973e+01, 9.83569804e-01, 9.76215789e-04, 0.00000000e+00],
 [5.44009940e+02, 7.97165184e-01, 1.62277296e-04, 0.00000000e+00],
 [1.11950438e+02, 9.68536811e-01, 4.51848857e-04, 0.00000000e+00],
 [5.36953773e+01, 9.90523260e-01, 8.63634707e-04, 0.00000000e+00],
 [5.54361948e+02, 8.89369150e-01, 1.13790518e-04, 0.00000000e+00],
 [1.80775902e+02, 9.02675987e-01, 3.68480472e-04, 0.00000000e+00],
 [1.69070469e+02, 8.75641587e-01, 4.37431511e-04, 0.00000000e+00],
 [2.36876718e+02, 8.38513816e-01, 3.57650234e-04, 0.00000000e+00],
 [4.92947865e+02, 8.69262969e-01, 1.24034100e-04, 0.00000000e+00],
 [4.33904808e+02, 8.65577046e-01, 1.43326813e-04, 0.00000000e+00],
 [5.20536182e+02, 8.86296805e-01, 1.15369344e-04, 0.00000000e+00],
 [2.54852979e+02, 8.51962146e-01, 3.53614630e-04, 0.00000000e+00],
 [3.02049076e+02, 9.69805300e-01, 3.24373366e-04, 0.00000000e+00],
 [1.64597979e+02, 8.74711286e-01, 4.69432514e-04, 0.00000000e+00],
 [9.19356698e+01, 9.88160467e-01, 8.63458670e-04, 0.00000000e+00],
 [1.39205796e+02, 9.76340190e-01, 5.96315926e-04, 0.00000000e+00],
 [5.34224717e+02, 8.88775940e-01, 1.25008721e-04, 0.00000000e+00],
 [3.25806268e+02, 8.50760097e-01, 2.57516685e-04, 0.00000000e+00],
 [3.12016202e+02, 8.76148018e-01, 2.12308769e-04, 0.00000000e+00],
 [2.52981822e+02, 8.54307411e-01, 3.05868942e-04, 0.00000000e+00],
 [3.14356134e+02, 8.84923382e-01, 1.82494493e-04, 0.00000000e+00],
 [5.13231604e+02, 8.83423160e-01, 1.22397341e-04, 0.00000000e+00],
 [1.50611993e+02, 8.88994008e-01, 5.32728461e-04, 0.00000000e+00],
 [1.16055125e+03, 8.43323476e-01, 6.16841804e-05, 0.00000000e+00],
 [3.14956914e+02, 9.29125430e-01, 2.44225477e-04, 0.00000000e+00],
 [7.83619317e+02, 8.69796787e-01, 1.14552904e-04, 0.00000000e+00],
 [4.14440613e+02, 9.07967239e-01, 1.73196081e-04, 0.00000000e+00],
 [9.26751507e+02, 8.69152044e-01, 7.72018768e-05, 0.00000000e+00],
 [1.46578379e+02, 9.61665555e-01, 3.23426923e-04, 0.00000000e+00],
 [1.01828713e+02, 9.67315541e-01, 8.95989395e-04, 0.00000000e+00],
 [4.32506896e+02, 7.99685701e-01, 2.17952104e-04, 0.00000000e+00],
 [5.63802865e+02, 8.61732713e-01, 1.33318967e-04, 0.00000000e+00],
 [9.33106887e+02, 8.38514710e-01, 7.26942290e-05, 0.00000000e+00],
 [3.62702896e+01, 9.63936272e-01, 8.62667642e-04, 0.00000000e+00],
 [3.21061321e+02, 8.96041364e-01, 2.04813023e-04, 0.00000000e+00]]
testFeaturesArray = np.array(testFeaturesArray, dtype = np.float64)
confusionMatrix = np.array((
               [[0, 0, 0],
                [0, 0, 0],
                [0, 0, 0]]), dtype= np.uint8)

height, width = testFeaturesArray.shape
print(height)
distanceList = []
for i in range(height):
    resultFeaturesArray = (trainFeaturesArray - testFeaturesArray[i, :])**2
    if i < 25:
        flag2 = 0
    elif i > 25 and i < 51:
        flag2 = 1
    else:
        flag2 = 2

    for j in range(height):
        if j < 25:
            flag = 0
        elif j > 25 and j < 51:
            flag = 1
        else:
            flag = 2
        distance = (np.sum(resultFeaturesArray[j, :3]))**(1/2)

        distanceList.append((distance, flag))
    distanceAsphalt = distanceList[:25]
    distanceDanger = distanceList[25:50]
    distanceGrass = distanceList[50:]

    distanceAsphalt.sort()
    distanceDanger.sort()
    distanceGrass.sort()
    distanceList.sort()

    asphaltCounter = 0
    dangerCounter = 0
    grassCounter = 0
    for counter in range(15):
        if distanceList[counter][1] == 0:
            asphaltCounter += 1
        elif distanceList[counter][1] == 1:
            dangerCounter += 1
        elif distanceList[counter][1] == 2:
            grassCounter += 1
    auxList = [(asphaltCounter, 0), (dangerCounter, 1), (grassCounter, 2)]
    auxList.sort()
    confusionMatrix[auxList[2][1], flag2] += 1
    distanceList = []

precision = float((confusionMatrix[0, 0] + confusionMatrix[1,1] + confusionMatrix[2, 2])/np.sum(confusionMatrix))

print(confusionMatrix)
print("\nReal           \tAsphalt\tDanger\tGrass")
print("Classified")
print("Asphalt\t        %d\t    %d\t    %d" %(confusionMatrix[0,0], confusionMatrix[0,1], confusionMatrix[0,2]))
print("Danger\t        %d\t    %d\t    %d" %(confusionMatrix[1,0], confusionMatrix[1,1], confusionMatrix[1,2]))
print("Grass\t        %d\t    %d\t    %d" %(confusionMatrix[2,0], confusionMatrix[2,1], confusionMatrix[2,2]))
print("\nPrecision: %.2f%%" %(precision))
b = datetime.datetime.now()

# print((b.hour-a.hour),"h",(b.minute-a.minute),"m",(b.second-a.second),"s")

print("O programa levou %d horas, %d minutos e %d segundos para executar"%(abs(b.hour-a.hour), abs(b.minute-a.minute), abs(b.second-a.second)))